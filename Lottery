// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract lottery{
    address public admin;
    address payable[] public participants;
    event participantAdded(address sender);
    event WinnerSelected(address winner);
    constructor(){
        admin=msg.sender;

    }
    function addParticipant() external payable{
        require(msg.value==0.1 ether,"The value should be 0.1 ETH");
        participants.push(payable(msg.sender));
        emit participantAdded(msg.sender);
    }
    function getBalance() public view returns (uint){
        require(msg.sender==admin, "Only admin can call this function");
        return address(this).balance;
    }
    function random() internal view returns (uint){
        return uint(keccak256(abi.encodePacked(block.prevrandao,block.timestamp, participants.length)));
    }
    function Winner() public{
        require(msg.sender==admin,"Only admin can call this function");
        require(participants.length>=3,"Add atleast 3 participants");
        address payable winner;
        uint r = random();
        uint index =r % participants.length;
        winner = participants[index];
        winner.transfer(getBalance());
        emit WinnerSelected(winner);
    }
}
